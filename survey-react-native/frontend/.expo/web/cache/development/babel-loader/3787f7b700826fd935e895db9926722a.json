{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Permissions from 'expo-permissions';\nimport { Notifications } from 'expo';\nexport function registerDeviceForNotifications() {\n  var _await$Permissions$ge, status, push_token_id;\n\n  return _regeneratorRuntime.async(function registerDeviceForNotifications$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 2:\n          _await$Permissions$ge = _context.sent;\n          status = _await$Permissions$ge.status;\n\n          if (!(status == 'granted')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 7:\n          push_token_id = _context.sent;\n          fetch(process.env.REACT_NATIVE_BACKEND_URL + \"/profile/devices\", {\n            credentials: 'include',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              push_token_id: push_token_id\n            })\n          });\n\n          if (Platform.OS === 'android') {\n            Notifications.createChannelAndroidAsync('default', {\n              name: 'default',\n              sound: true,\n              priority: 'max',\n              vibrate: [0, 250, 250, 250]\n            });\n          }\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/joshua.miles/Documents/My-Cohorts/houston-se-030920/Lecture-Code/survey-react-native/frontend/registerDeviceForNotifications.js"],"names":["Permissions","Notifications","registerDeviceForNotifications","getAsync","NOTIFICATIONS","status","getExpoPushTokenAsync","push_token_id","fetch","process","env","REACT_NATIVE_BACKEND_URL","credentials","method","headers","body","JSON","stringify","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;AACA,SAASC,aAAT,QAA8B,MAA9B;AAEA,OAAO,SAAeC,8BAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACsBF,WAAW,CAACG,QAAZ,CAAqBH,WAAW,CAACI,aAAjC,CADtB;;AAAA;AAAA;AACKC,UAAAA,MADL,yBACKA,MADL;;AAAA,gBAGCA,MAAM,IAAI,SAHX;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAI2BJ,aAAa,CAACK,qBAAd,EAJ3B;;AAAA;AAIKC,UAAAA,aAJL;AAMCC,UAAAA,KAAK,CAAIC,OAAO,CAACC,GAAR,CAAYC,wBAAhB,uBAA4D;AAC7DC,YAAAA,WAAW,EAAE,SADgD;AAE7DC,YAAAA,MAAM,EAAE,MAFqD;AAG7DC,YAAAA,OAAO,EAAE;AACL,8BAAgB;AADX,aAHoD;AAM7DC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBV,cAAAA,aAAa,EAAEA;AADE,aAAf;AANuD,WAA5D,CAAL;;AAWA,cAAIW,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3BlB,YAAAA,aAAa,CAACmB,yBAAd,CAAwC,SAAxC,EAAmD;AAC/CC,cAAAA,IAAI,EAAE,SADyC;AAE/CC,cAAAA,KAAK,EAAE,IAFwC;AAG/CC,cAAAA,QAAQ,EAAE,KAHqC;AAI/CC,cAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd;AAJsC,aAAnD;AAMH;;AAxBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as Permissions from 'expo-permissions';\nimport { Notifications } from 'expo';\n\nexport async function registerDeviceForNotifications() {\n    const { status } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n\n    if (status == 'granted') {\n        let push_token_id = await Notifications.getExpoPushTokenAsync();\n\n        fetch(`${process.env.REACT_NATIVE_BACKEND_URL}/profile/devices`, {\n            credentials: 'include',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                push_token_id: push_token_id\n            })\n        })\n\n        if (Platform.OS === 'android') {\n            Notifications.createChannelAndroidAsync('default', {\n                name: 'default',\n                sound: true,\n                priority: 'max',\n                vibrate: [0, 250, 250, 250],\n            });\n        }\n\n    }\n}"]},"metadata":{},"sourceType":"module"}